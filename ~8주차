---------------------------------------- 7주차 요약  시작 ----------------------------------------
이번 회차에서는 DeZero에서 텐서를 다루는 데 필요한 핵심 함수들을 구현했다.
이를 통해 머신러닝에서 주로 사용되는 벡터나 행렬과 같은 데이터를 효율적으로 다룰 수 있다.

1. 텐서 사용과 주의점: DeZero는 머신러닝에서 흔히 사용되는 벡터와 행렬과 같은 텐서를 다룰 수 있다.
이를 위해 주의해야 할 점과 함께 DeZero의 기능을 확장했습니다.

2. 구현한 함수들: DeZero에서는 다양한 함수를 구현했는데, 이 중 일부는 텐서를 입력으로 받아도 역전파를 문제없이 처리할 수 있다.
주요 함수로는 add, mul, div, sin 등이 있다.

3. 텐서의 형상 변환: DeZero는 reshape 함수를 포함하여 텐서의 형상을 변환하는 기능도 제공한다.
이를 통해 텐서의 형상을 유연하게 조작할 수 있다.

4. 브로드캐스트: DeZero는 넘파이와 유사하게 브로드캐스트 기능을 제공한다.
이를 통해 서로 다른 형상을 가진 배열 간의 연산을 수행할 수 있다.

5. 행렬 곱과 역전파: DeZero에서는 행렬 곱과 같은 복잡한 연산에 대한 역전파도 처리할 수 있다.
이를 통해 머신러닝 모델의 학습 과정을 효율적으로 구현할 수 있다.

* 내용 추가
6. 브로드캐스트의 역전파: DeZero에서 브로드캐스트 기능을 제공하기 위해, 브로드캐스트 연산의 역전파도 처리한다.
이를 통해 브로드캐스트된 배열들 간의 연산에 대한 역전파가 올바르게 이루어진다.

7. 넘파이와의 호환성: DeZero는 넘파이와 유사한 인터페이스를 제공하여 사용자가 익숙한 방식으로 코드를 작성할 수 있다.
또한 넘파이와의 호환성을 고려하여, DeZero의 함수들이 넘파이와 비슷한 동작을 하도록 구현되어 있다.

8. 내적과 행렬 곱의 응용: 내적과 행렬 곱은 머신러닝에서 주로 사용되는 연산이다.
DeZero에서는 이러한 연산을 포함하여 다양한 머신러닝 모델을 구현할 수 있다.
이를 통해 사용자는 복잡한 모델을 구현하고 학습하는 데 도움을 받을 수 있다.

9. 역전파의 이론적 배경: 역전파 알고리즘의 이론적 배경을 설명하여, DeZero의 역전파 구현이 어떻게 이루어지는지 이해할 수 있도록 도와준다.
이를 통해 사용자는 DeZero의 역전파 구현을 더 깊이 이해할 수 있다.

10. 최적화와 학습: DeZero는 모델의 학습 과정을 지원하기 위해 다양한 최적화 알고리즘과 함께 사용될 수 있다.
이를 통해 사용자는 머신러닝 모델을 학습하고 최적화하는 데 필요한 모든 기능을 DeZero에서 제공받을 수 있다.
---------------------------------------- 7주차 요약 끝 ----------------------------------------
---------------------------------------- 8주차 요약  시작 ----------------------------------------
머신러닝의 본질은 데이터를 사용하여 문제를 해결하고, 모아진 데이터로부터 컴퓨터가 스스로 해법을 찾아내는 것이다. 
이를 위해 DeZero를 사용하여 머신러닝 문제를 해결하는데, 이번에는 선형 회귀를 구현하는 단계를 나타낸다.

토이 데이터셋은 실험용으로 만든 작은 데이터셋으로, 선형 관계가 있으며 노이즈로 인해 점들이 퍼져 있다. 
이 데이터셋을 사용하여 주어진 데이터를 잘 표현하는 함수를 찾고자 하는데, 이를 위해 선형 관계를 표현하는 식을 설정하고, 평균 제곱 오차를 최소화하여 학습을 진행한다.

학습은 경사하강법을 사용하여 손실 함수의 출력을 최소화하는 매개변수를 찾는 것으로 이루어진다.
이때 중간에 등장하는 변수들은 메모리를 많이 차지하므로, 메모리 최적화를 위해 개선이 필요하다.
이를 위해 DeZero의 함수를 개선하여 메모리를 더 효율적으로 사용하는 방법을 도입한다.

또한, 선형 회귀를 신경망으로 확장하여 비선형 데이터셋에 대한 문제를 해결한다.
활성화 함수를 이용하여 비선형 변환을 수행하고, 다층 신경망을 구현하여 복잡한 문제에 대응한다.
이를 위해 Layer 클래스와 Parameter 클래스를 사용하여 매개변수를 효율적으로 관리한다.

최종적으로는 완전연결계층 신경망을 구현하여 다양한 문제에 적용할 수 있는 모델을 만들게 된다.
이를 통해 DeZero를 사용하여 신경망을 효율적으로 구현하고, 다양한 머신러닝 문제에 대응할 수 있게 된다.
---------------------------------------- 8주차 요약  끝 ----------------------------------------
---------------------------------------- 8주차 요약 내용 코드 작성 시작 ----------------------------------------
import numpy as np
from dezero import Variable
import dezero.functions as F
import dezero.layers as L

# 토이 데이터셋 생성
np.random.seed(0)
x = np.random.rand(100, 1)
y = 5 * x + np.random.randn(100, 1)

# 선형 회귀 모델 정의
class LinearModel(L.Layer):
    def __init__(self):
        super().__init__()
        self.fc = L.Linear(1)

    def forward(self, x):
        return self.fc(x)

# 평균 제곱 오차 함수
def mean_squared_error(pred, target):
    return F.mean_squared_error(pred, target)

# 모델 생성
model = LinearModel()

# 매개변수 갱신을 위한 옵티마이저 설정
optimizer = dezero.optimizers.SGD(lr=0.01)

# 학습
for epoch in range(100):
    # 순전파
    y_pred = model(x)
    loss = mean_squared_error(y_pred, y)

    # 역전파
    model.cleargrads()
    loss.backward()

    # 매개변수 갱신
    optimizer.update()

    print(f'Epoch {epoch+1}, Loss: {loss.data}')

# 학습된 모델을 사용하여 예측
new_x = np.array([[0.2], [0.5], [0.8]])
pred = model(new_x)
print(f'Predictions: {pred}')
---------------------------------------- 8주차 요약 내용 코드 작성 완성 ----------------------------------------



